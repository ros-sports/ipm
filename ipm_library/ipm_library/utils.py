# Copyright (c) 2022 Hamburg Bit-Bots
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Optional, Tuple

from builtin_interfaces.msg import Time
from geometry_msgs.msg import Transform
import numpy as np
from rclpy.duration import Duration
from sensor_msgs.msg import CameraInfo
from shape_msgs.msg import Plane
from tf2_geometry_msgs import PointStamped
import tf2_ros
from transforms3d.quaternions import quat2mat


def plane_general_to_point_normal(plane: Plane) -> Tuple[np.ndarray, np.ndarray]:
    """
    Convert general plane form to point normal form.

    :param plane: The input plane in general form
    :returns: A tuple with the point and normal
    """
    # ax + by + cz + d = 0 where a, b, c are the normal vector
    a, b, c, d = plane.coef
    # A perpendicular array to the plane
    perpendicular = np.array([a, b, c])
    # Get closest point from (0, 0, 0) to the plane
    point = perpendicular * -d / np.dot(perpendicular, perpendicular)
    # A normal vector to the plane
    normal = perpendicular / np.linalg.norm(perpendicular)
    return point, normal


def transform_plane_to_frame(
        plane: Tuple[np.ndarray, np.ndarray],
        input_frame: str,
        output_frame: str,
        time: Time,
        buffer: tf2_ros.Buffer,
        timeout: Optional[Duration] = None) -> Tuple[np.ndarray, np.ndarray]:
    """
    Transform a plane from one frame to another.

    :param plane: The planes base point and normal vector as numpy arrays
    :param input_frame: Current frame of the plane
    :param output_frame: The desired frame of the plane
    :param time: Timestamp which is used to query the tf buffer and get the tranform at this moment
    :param buffer: The refrence to the used tf buffer
    :param timeout: An optinal timeout after which an exception is raised
    :returns: A Tuple containing the planes base point and normal vector in the
         new frame at the provided timestamp
    """
    # Set optional timeout
    if timeout is None:
        timeout = Duration(seconds=0.5)

    # Create two points to transform the base point and the normal vector
    # The second point is generated by adding the normal to the base point
    field_normal = PointStamped()
    field_normal.header.frame_id = input_frame
    field_normal.header.stamp = time
    field_normal.point.x = plane[0][0] + plane[1][0]
    field_normal.point.y = plane[0][1] + plane[1][1]
    field_normal.point.z = plane[0][2] + plane[1][2]
    field_normal = buffer.transform(
        field_normal, output_frame, timeout=timeout)
    field_point = PointStamped()
    field_point.header.frame_id = input_frame
    field_point.header.stamp = time
    field_point.point.x = plane[0][0]
    field_point.point.y = plane[0][1]
    field_point.point.z = plane[0][2]
    field_point = buffer.transform(field_point, output_frame, timeout=timeout)

    field_point = np.array([
        field_point.point.x,
        field_point.point.y,
        field_point.point.z])
    field_normal = np.array([
        field_normal.point.x,
        field_normal.point.y,
        field_normal.point.z])

    # field normal is a vector! so it stats at field point and goes up in z direction
    field_normal = field_point - field_normal
    return field_point, field_normal


def get_field_intersection_for_pixels(
        camera_info: CameraInfo,
        points: np.ndarray,
        plane_normal: np.ndarray,
        plane_base_point: np.ndarray,
        scale: float = 1.0) -> np.ndarray:
    """
    Map a NumPy array of points in image space on the given plane.

    :param points: A nx2 array with n being the number of points
    :param plane_normal: The normal vector of the mapping plane
    :param plane_base_point: The base point of the mapping plane
    :param scale: A scaling factor used if e.g. a mask with a lower resolution is transformed
    :returns: A NumPy array containing the mapped points
        in 3d relative to the camera optical frame
    """
    camera_projection_matrix = camera_info.k

    # Calculate binning and scale
    binning_x = max(camera_info.binning_x, 1) / scale
    binning_y = max(camera_info.binning_y, 1) / scale

    # Create rays
    ray_directions = np.zeros((points.shape[0], 3))
    ray_directions[:, 0] = ((points[:, 0] - (camera_projection_matrix[2] / binning_x)) /
                            (camera_projection_matrix[0] / binning_x))
    ray_directions[:, 1] = ((points[:, 1] - (camera_projection_matrix[5] / binning_y)) /
                            (camera_projection_matrix[4] / binning_y))
    ray_directions[:, 2] = 1

    # Calculate ray -> plane intersections
    intersections = line_plane_intersections(
        plane_normal, plane_base_point, ray_directions)

    return intersections


def line_plane_intersections(
        plane_normal: np.ndarray,
        plane_base_point: np.ndarray,
        ray_directions: np.ndarray) -> np.ndarray:
    """
    Calculate the intersections of rays with a plane described by a normal and a point.

    :param plane_normal: The normal vector of the mapping plane
    :param plane_base_point: The base point of the mapping plane
    :param ray_directions: A nx3 array with n being the number of rays
    :returns: A nx3 array containing the 3d intersection points with n being the number of rays.
    """
    n_dot_u = np.tensordot(plane_normal, ray_directions, axes=([0], [1]))
    relative_ray_distance = -plane_normal.dot(-plane_base_point) / n_dot_u

    # we are casting a ray, intersections need to be in front of the camera
    relative_ray_distance[relative_ray_distance <= 0] = np.nan

    ray_directions[:, 0] = np.multiply(
        relative_ray_distance, ray_directions[:, 0])
    ray_directions[:, 1] = np.multiply(
        relative_ray_distance, ray_directions[:, 1])
    ray_directions[:, 2] = np.multiply(
        relative_ray_distance, ray_directions[:, 2])

    return ray_directions


def transform_points(point_cloud: np.ndarray, transform: Transform) -> np.ndarray:
    """
    Transform a bulk of points from an numpy array using a provided `Transform`.

    :param point_cloud: nx3 Array of points where n is the number of points
    :param transform: TF2 transform used for the transformation
    :returns: Array with the same shape as the input array, but with the transformation applied
    """
    # Build affine transformation
    transform_translation = np.array([
        transform.translation.x,
        transform.translation.y,
        transform.translation.z
    ])
    transform_rotation_matrix = quat2mat(
        np.array([
            transform.rotation.w,
            transform.rotation.x,
            transform.rotation.y,
            transform.rotation.z
        ]))

    # "Batched" matmul meaning a matmul for each point
    # First we offset all points by the translation part
    # followed by a rotation using the rotation matrix
    return np.einsum(
        'ij, pj -> pi',
        transform_rotation_matrix,
        point_cloud) + transform_translation


def create_horizontal_plane(
        height_offset: float = 0.0) -> Plane:
    """Create a plane message for a given frame at a given time, with a given height offset."""
    plane = Plane()
    plane.coef[2] = 1.0  # Normal in z direction
    plane.coef[3] = -height_offset  # Distance above the ground
    return plane
